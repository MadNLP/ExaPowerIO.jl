var documenterSearchIndex = {"docs":
[{"location":"dev/#Developer-Documentation","page":"Developer Docs","title":"Developer Documentation","text":"","category":"section"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"This documentation covers how to:","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"Run the projects test suite\nRun the projets benchmarks\nUpdate and build documentation of ExaPowerIO","category":"page"},{"location":"dev/#Test-suite","page":"Developer Docs","title":"Test suite","text":"","category":"section"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"ExaPowerIO's test suite can be run with the following command:","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"julia --project=. -e 'using Pkg; Pkg.test(\"ExaPowerIO\")'","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"The tests compare output from parsing with PowerModels.jl. We realize this is suboptimal, and would encourage PR's changing this.","category":"page"},{"location":"dev/#Benchmarks","page":"Developer Docs","title":"Benchmarks","text":"","category":"section"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"ExaPowerIO's benchmarking suite can be run with the following command:","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"julia --project=benchmark benchmark/runbenchmarks.jl","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"Additionally, there are three available flags which can be passed to the benchmarking script:","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"--compare can be passed to output a comparison with PowerModels.jl's parser\n--intermediate can be passed to output the timing of the two stages of the parser (text -> struct, struct -> named tuple if applicable)\n--num-samples <k> or -n <k> can be passed to set the number of samples taken of each case in the benchmark. The default value is 10.","category":"page"},{"location":"dev/#Documentation","page":"Developer Docs","title":"Documentation","text":"","category":"section"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"ExaPowerIO uses Documenter.jl for its documentation. To build and deploy the documentation locally:","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"cd docs\njulia --project -e 'include(\"make.jl\"); using LiveServer; serve(dir=\"build\")'","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"The documentation should then be visible at localhost:8000.","category":"page"},{"location":"user/#User-Documentation","page":"User Docs","title":"User Documentation","text":"","category":"section"},{"location":"user/","page":"User Docs","title":"User Docs","text":"ExaPowerIO exports 1 function:","category":"page"},{"location":"user/#ExaPowerIO.parse_matpower","page":"User Docs","title":"ExaPowerIO.parse_matpower","text":"function parse_matpower(\n    ::Type{T},\n    ::Type{V},\n    path :: String;\n    library=nothing,\n) :: PowerData{T} where {T<:Real, V<:AbstractVector}\nparse_matpower(path; library=nothing)\nparse_matpower(::Type{T}, path; library=nothing) where {T<:Real}\nparse_matpower(::Type{V}, path; library=nothing) where {V<:Vector}\n\nT and V can be ommited and have default values Float64, and Vector respectively.\n\nlibrary can be one of the following values:\n\n:nothing indicates that the filesystem should be searched for path\n:pglib indicates that the PGLib database should be searched for path\n:matpower indicates that the MATPOWER database should be searched for path\n\n\n\n\n\n","category":"function"},{"location":"user/#ExaPowerIO.PowerData","page":"User Docs","title":"ExaPowerIO.PowerData","text":"struct Data{T <: Real}\n    version :: String\n    baseMVA :: T\n    bus :: Vector{BusData{T}}\n    gen :: Vector{GenData{T}}\n    branch :: Vector{BranchData{T}}\n    storage :: Vector{StorageData{T}}\nend\n\nversion, baseMVA, bus, gen, branch, and storage all corespond to members of the mpc object created by a matpower file. Their fields correspond exactly with the columns of the relevant mpc member.\n\n\n\n\n\n","category":"type"},{"location":"user/#ExaPowerIO.BusData","page":"User Docs","title":"ExaPowerIO.BusData","text":"struct BusData{T <: Real}\n    i :: Int\n    bus_i :: Int\n    type :: Int\n    pd :: T\n    qd :: T\n    gs :: T\n    bs :: T\n    area :: Int\n    vm :: T\n    va :: T\n    baseKV :: T\n    zone :: Int\n    vmax :: T\n    vmin :: T\nend\n\n\n\n\n\n","category":"type"},{"location":"user/#ExaPowerIO.GenData","page":"User Docs","title":"ExaPowerIO.GenData","text":"struct GenData{T <: Real}\n    i :: Int\n    bus :: Int\n    pg :: T\n    qg :: T\n    qmax :: T\n    qmin :: T\n    vg :: T\n    mbase :: T\n    status :: Int\n    pmax :: T\n    pmin :: T\n    model_poly :: Bool\n    startup :: T\n    shutdown :: T\n    n :: Int\n    c :: NTuple{3, T}\nend\n\nbus is an index into the PowerData.bus Vector, not bus_i values\n\n\n\n\n\n","category":"type"},{"location":"user/#ExaPowerIO.BranchData","page":"User Docs","title":"ExaPowerIO.BranchData","text":"struct BranchData{T <: Real}\n    i :: Int\n    f_bus :: Int\n    t_bus :: Int\n    br_r :: T\n    br_x :: T\n    b_fr :: T,\n    b_to :: T,\n    g_fr :: T,\n    g_to :: T,\n    rate_a ::T\n    rate_b :: T\n    rate_c :: T\n    tap :: T\n    shift :: T\n    status :: Int\n    angmin :: T\n    angmax :: T\n    f_idx::Int\n    t_idx::Int\n    c1 :: T\n    c2 :: T\n    c3 :: T\n    c4 :: T\n    c5 :: T\n    c6 :: T\n    c7 :: T\n    c8 :: T\nend\n\nfbus and tbus are indices into the PowerData.bus Vector, not bus_i values\n\n\n\n\n\n","category":"type"},{"location":"user/#ExaPowerIO.ArcData","page":"User Docs","title":"ExaPowerIO.ArcData","text":"struct ArcData{T <: Real}\n    i :: Int\n    bus :: Int\n    rate_a :: T\nend\n\n\n\n\n\n","category":"type"},{"location":"user/#ExaPowerIO.StorageData","page":"User Docs","title":"ExaPowerIO.StorageData","text":"struct StorageData{T <: Real}\n    i :: Int\n    storage_bus :: Int\n    ps :: T\n    qs :: T\n    energy :: T\n    energy_rating :: T\n    charge_rating :: T\n    discharge_rating :: T\n    charge_efficiency :: T\n    discharge_efficiency :: T\n    thermal_rating :: T\n    qmin :: T\n    qmax :: T\n    r :: T\n    x :: T\n    p_loss :: T\n    q_loss :: T\n    status :: Int\nend\n\n\n\n\n\n","category":"type"},{"location":"user/#Example-Usage","page":"User Docs","title":"Example Usage","text":"","category":"section"},{"location":"user/","page":"User Docs","title":"User Docs","text":"julia> using ExaPowerIO\n\njulia> result = parse_matpower(\"pglib_opf_case3_lmbd.m\"; library=:pglib);\n\njulia> result.version\n\"2\"\n\njulia> result.baseMVA\n100.0\n\njulia> result.bus\n3-element Vector{BusData{Float64}}:\n BusData{Float64}(1, 1, 3, 1.1, 0.4, 0.0, 0.0, 1, 1.0, 0.0, 240.0, 1, 1.1, 0.9)\n BusData{Float64}(2, 2, 2, 1.1, 0.4, 0.0, 0.0, 1, 1.0, 0.0, 240.0, 1, 1.1, 0.9)\n BusData{Float64}(3, 3, 2, 0.95, 0.5, 0.0, 0.0, 1, 1.0, 0.0, 240.0, 1, 1.1, 0.9)\n\njulia> result.gen\n3-element Vector{GenData{Float64}}:\n GenData{Float64}(1, 1, 10.0, 0.0, 10.0, -10.0, 1.0, 100.0, 1, 20.0, 0.0, true, 0.0, 0.0, 3, (1100.0, 500.0, 0.0))\n GenData{Float64}(2, 2, 10.0, 0.0, 10.0, -10.0, 1.0, 100.0, 1, 20.0, 0.0, true, 0.0, 0.0, 3, (850.0000000000001, 120.0, 0.0))\n GenData{Float64}(3, 3, 0.0, 0.0, 10.0, -10.0, 1.0, 100.0, 1, 0.0, 0.0, true, 0.0, 0.0, 3, (0.0, 0.0, 0.0))\n\njulia> result.branch\n3-element Vector{BranchData{Float64}}:\n BranchData{Float64}(1, 1, 3, 0.065, 0.62, 0.225, 0.225, 0.0, 0.0, 90.0, 90.0, 90.0, 1.0, 0.0, 1, -0.5235987755982988, 0.5235987755982988, 1, 4, -0.16725635252492763, 1.5953682856223865, -0.16725635252492763, 1.5953682856223865, 0.16725635252492763, -1.3703682856223864, 0.16725635252492763, -1.3703682856223864)\n BranchData{Float64}(2, 3, 2, 0.025, 0.75, 0.35, 0.35, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 0.0, 1, -0.5235987755982988, 0.5235987755982988, 2, 5, -0.044395116537180916, 1.3318534961154274, -0.044395116537180916, 1.3318534961154274, 0.044395116537180916, -0.9818534961154274, 0.044395116537180916, -0.9818534961154274)\n BranchData{Float64}(3, 1, 2, 0.042, 0.9, 0.15, 0.15, 0.0, 0.0, 90.0, 90.0, 90.0, 1.0, 0.0, 1, -0.5235987755982988, 0.5235987755982988, 3, 6, -0.05173917542536994, 1.1086966162579273, -0.05173917542536994, 1.1086966162579273, 0.05173917542536994, -0.9586966162579272, 0.05173917542536994, -0.9586966162579272)\n\njulia> result.storage\nStorageData{Float64}[]\n","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is the documentation of ExaPowerIO.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"DICLAIMER: ExaPowerIO is in active development. There may be missing features, documentation, or other issues. If you experience any of these, please open Issues, or Pull Requests","category":"page"},{"location":"#What-does-ExaPowerIO-do?","page":"Introduction","title":"What does ExaPowerIO do?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ExaPowerIO was created with the goal of being a low-scope IO package for working with the Matpower File Format. Currently, ExaPowerIO only supports input (parsing) operations. ","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If you are interested in trying ExaPowerIO, please see the Usage Documentation for information on using the functions / structs exported by ExaPowerIO.","category":"page"},{"location":"#Contributing","page":"Introduction","title":"Contributing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If you wish to contribute to ExaPowerIO, please see the Developer Documentation for information on project structure, as well as running benchmarks / tests.","category":"page"},{"location":"#Alternatives","page":"Introduction","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The main alternative to ExaPowerIO is PowerModels.jl, a monolithic repository which:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"parses and processes Matpower as well as PTI files\nexports formulations for various ACOPF problems\nincludes tools to help solve these problems.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Developers wishing to utilize only 1 or 2 of these utilities may find PowerModels bloated.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"ExaPowerIO.jl due to its focused nature has superior performance to PowerModels. As seen, ExaPowerIO outperforms PowerModels by a factor of almost 2 in both allocation and timing.","category":"page"}]
}
